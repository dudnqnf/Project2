package com.sportsfactory.sportforall.service;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Base64;
import java.util.Iterator;

import javax.annotation.Resource;
import javax.imageio.ImageIO;
import javax.servlet.ServletContext;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;

import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.sportsfactory.sportforall.dao.AccountDao;
import com.sportsfactory.sportforall.dao.ClubDao;
import com.sportsfactory.sportforall.dao.LocationDao;
import com.sportsfactory.sportforall.dao.SportsTypeDao;
import com.sportsfactory.sportforall.dto.AccountDto;
import com.sportsfactory.sportforall.dto.AlbumLikeDto;
import com.sportsfactory.sportforall.dto.AlbumReplyDto;
import com.sportsfactory.sportforall.dto.AlbumZzimDto;
import com.sportsfactory.sportforall.dto.BoardZzimDto;
import com.sportsfactory.sportforall.dto.ClubAlbumDto;
import com.sportsfactory.sportforall.dto.ClubBoardDto;
import com.sportsfactory.sportforall.dto.ClubDto;
import com.sportsfactory.sportforall.dto.ClubInquiryDto;
import com.sportsfactory.sportforall.dto.ClubUserDto;
import com.sportsfactory.sportforall.dto.ClubUserFeeDto;
import com.sportsfactory.sportforall.dto.ClubUserPaidDto;
import com.sportsfactory.sportforall.dto.CommentDto;
import com.sportsfactory.sportforall.dto.JsonDto;
import com.sportsfactory.sportforall.dto.LikeDto;
import com.sportsfactory.sportforall.dto.LocationDto;
import com.sportsfactory.sportforall.dto.SportsTypeDto;
import com.sportsfactory.sportforall.util.FileUtil;
import com.sportsfactory.sportforall.util.Info;

@Service("ClubService")
public class ClubService {
	
	private Logger log = Logger.getLogger(ClubService.class);
	
	@Autowired
	private SqlSession sqlSession;
	@Autowired
	private LocationService locationService;
	@Autowired
	private SportsTypeService sportsTypeService;
	@Autowired
	private ServletContext servletContext;
	
	
	@Resource(name="fileUtil")
    private FileUtil fileUtil;
	
	public void getClubList(HttpServletRequest request, Model model){
		//계정정보 가져오기
		AccountDao Adao = sqlSession.getMapper(AccountDao.class);
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		//TODO user_id없을때 예외처리
		AccountDto Adto = new AccountDto();
		Adto.setUSER_ID(Integer.parseInt(user_id));
		AccountDto user_info = Adao.getUserInfo(Adto);
		
		model.addAttribute("user_info", user_info);
		
		
		//클럽정보 가져오기
		ClubDao Cdao = sqlSession.getMapper(ClubDao.class);
		String sortingSi = user_info.getLOCATION_SI();
		String sortingGu = user_info.getLOCATION_GU();
		String sortingCategory = request.getParameter("category");
		String sortingSportsName = Info.All;
		
		ClubDto Cdto = new ClubDto();
		Cdto.setSI(sortingSi);
		Cdto.setGU(sortingGu);
		Cdto.setCATEGORY(sortingCategory);
		Cdto.setSPORTS_NAME(sortingSportsName);
		
		ArrayList<ClubDto> sortedSportsName = Cdao.getCategoryClubList(Cdto);
		
		model.addAttribute("sortingSi", sortingSi);
		model.addAttribute("sortingGu", sortingGu);
		model.addAttribute("sortingCategory", sortingCategory);
		model.addAttribute("sortingeSportsName", sortingSportsName);
		model.addAttribute("all", Info.All);
		model.addAttribute("ClubList", sortedSportsName);
		
		
		//시정보 가져오기
		LocationDao Sdao = sqlSession.getMapper(LocationDao.class);
		model.addAttribute("LocationSI", Sdao.getSi());
		
		
		//구정보 가져오기
		LocationDao Gdao = sqlSession.getMapper(LocationDao.class);
		String paramLoca = request.getParameter("location");
		String si = null;
		
		if(paramLoca!=null)
			si = paramLoca;
		else if(sortingSi!=null)
			si = sortingSi.toString();
		
		LocationDto Gdto = new LocationDto();
		Gdto.setSI(si);
		model.addAttribute("LocationGU", Gdao.getGu(Gdto));
		
		
		//카테고리 가져오기
		SportsTypeDao STdao = sqlSession.getMapper(SportsTypeDao.class);
		ArrayList<SportsTypeDto> STDto = STdao.getCategory();
		model.addAttribute("category", STDto);
		
		
		//스포츠 종목가져오기
		String paramCate = request.getParameter("category");
		String category = null;
		
		if(paramCate!=null)
			category = paramCate;
		else if(sortingCategory!=null)
			category = sortingCategory.toString();
		
		SportsTypeDto STdto = new SportsTypeDto();
		STdto.setCATEGORY(category);
		
		ArrayList<SportsTypeDto> Dto = STdao.getSportsName(STdto);
		model.addAttribute("sports_name", Dto);
		
		
		//연합회정보 가져오기
		ClubDto Fdto = new ClubDto();
		Fdto.setSI(sortingSi);
		Fdto.setGU(sortingGu);
		Fdto.setCATEGORY(sortingCategory);
		Fdto.setSPORTS_NAME(sortingSportsName);
		
		ArrayList<ClubDto> FedList = Cdao.getFedList(Fdto);
		model.addAttribute("FedList", FedList);
	}
	
	public void getSortedClubList(HttpServletRequest request, Model model){
		//클럽내용 가져오기
		ClubDao Cdao = sqlSession.getMapper(ClubDao.class);
		
		String sortingSi = request.getParameter("si");
		String sortingGu = request.getParameter("gu");
		String sortingCategory = request.getParameter("category");
		String sortingSportsName = request.getParameter("sportsName");

		ArrayList<ClubDto> sortedAllSportsName = null;
		ArrayList<ClubDto> sortedSportsName = null;
		
		ClubDto Cdto = new ClubDto();
		Cdto.setSI(sortingSi);
		Cdto.setGU(sortingGu);
		Cdto.setCATEGORY(sortingCategory);
		Cdto.setSPORTS_NAME(sortingSportsName);
		
		if(sortingSportsName.equalsIgnoreCase(Info.All)){
			sortedAllSportsName = Cdao.getCategoryClubList(Cdto);
			model.addAttribute("ClubList", sortedAllSportsName);
		} else {
			sortedSportsName = Cdao.getClubList(Cdto);
			model.addAttribute("ClubList", sortedSportsName);
		}
		
		model.addAttribute("sortingSi", sortingSi);
		model.addAttribute("sortingGu", sortingGu);
		model.addAttribute("sortingCategory", sortingCategory);
		model.addAttribute("sortingeSportsName", sortingSportsName);
		model.addAttribute("all", Info.All);
		
		//시 내용 가져오기
		LocationDao Sdao = sqlSession.getMapper(LocationDao.class);
		model.addAttribute("LocationSI", Sdao.getSi());
		
		//구 내용 가져오기
		LocationDao Gdao = sqlSession.getMapper(LocationDao.class);
		
		String param = request.getParameter("location");
		String si = null;
		
		if(param!=null)
			si = param;
		else if(sortingSi!=null)
			si = sortingSi.toString();
		
		LocationDto Gdto = new LocationDto();
		Gdto.setSI(si);
		
		model.addAttribute("LocationGU", Gdao.getGu(Gdto));
		
		//카테고리가져오기
		SportsTypeDao STdao = sqlSession.getMapper(SportsTypeDao.class);
		ArrayList<SportsTypeDto> STDto = STdao.getCategory();
		model.addAttribute("category", STDto);
		
		//스포츠 이름 가져오기
		String paramCate = request.getParameter("category");
		String category = null;
		
		if(paramCate!=null)
			category = paramCate;
		else if(sortingCategory!=null)
			category = sortingCategory.toString();
		
		SportsTypeDto STdto = new SportsTypeDto();
		STdto.setCATEGORY(category);
		
		ArrayList<SportsTypeDto> Dto = STdao.getSportsName(STdto);
		model.addAttribute("sports_name", Dto);
		
		
		//연합회정보 가져오기
		sortedAllSportsName = null;
		
		Cdto = new ClubDto();
		Cdto.setSI(sortingSi);
		Cdto.setGU(sortingGu);
		Cdto.setCATEGORY(sortingCategory);
		Cdto.setSPORTS_NAME(sortingSportsName);
		
		ArrayList<ClubDto> FedList = Cdao.getFedList(Cdto);
		model.addAttribute("FedList", FedList);
	}
	
	public void getFedList(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		AccountDto dto = (AccountDto)request.getAttribute("user_info");
		String sortingSi = dto.getLOCATION_SI();
		String sortingGu = dto.getLOCATION_GU();
		String sortingCategory = request.getParameter("category");
		String sortingSportsName = Info.All;
		
		ClubDto Cdto = new ClubDto();
		Cdto.setSI(sortingSi);
		Cdto.setGU(sortingGu);
		Cdto.setCATEGORY(sortingCategory);
		Cdto.setSPORTS_NAME(sortingSportsName);
		
		//클럽 내용
		ArrayList<ClubDto> sortedSportsName = dao.getFedList(Cdto);
		
		model.addAttribute("sortingSi", sortingSi);
		model.addAttribute("sortingGu", sortingGu);
		model.addAttribute("sortingCategory", sortingCategory);
		model.addAttribute("sortingeSportsName", sortingSportsName);
		model.addAttribute("FedList", sortedSportsName);
	}
	
	public void getSortedFedList(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
		String sortingSi = request.getParameter("si");
		String sortingGu = request.getParameter("gu");
		String sortingCategory = request.getParameter("category");
		String sortingSportsName = request.getParameter("sportsName");

		//클럽 내용
		ArrayList<ClubDto> sortedAllSportsName = null;
		
		ClubDto Cdto = new ClubDto();
		Cdto.setSI(sortingSi);
		Cdto.setGU(sortingGu);
		Cdto.setCATEGORY(sortingCategory);
		Cdto.setSPORTS_NAME(sortingSportsName);
		
		//클럽 내용
		ArrayList<ClubDto> sortedSportsName = dao.getFedList(Cdto);
		
		model.addAttribute("sortingSi", sortingSi);
		model.addAttribute("sortingGu", sortingGu);
		model.addAttribute("sortingCategory", sortingCategory);
		model.addAttribute("sortingeSportsName", sortingSportsName);
		model.addAttribute("FedList", sortedSportsName);
	}
	
	public void getClubAlbum(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
		ClubAlbumDto Cdto = new ClubAlbumDto();
		Cdto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		ArrayList<ClubAlbumDto> result = dao.getAllClubAlbum(Cdto);
		
		model.addAttribute("ClubAlbum", result);
	}
	
	public Object getClubBoard(HttpServletRequest request, Model model){
		int num_initial = 0;
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ArrayList<ClubBoardDto> result = null;
		String validate = request.getParameter("keyword");
		ClubUserDto CUdto = (ClubUserDto) request.getAttribute("user_level");
		
		ClubBoardDto Cdto = new ClubBoardDto();
		Cdto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		
		String last_bid = request.getParameter("last_bid");
		if(last_bid == null || last_bid.equals("")){
			last_bid = "-1";
		}
		Cdto.setBOARD_ID(Integer.parseInt(last_bid));

		Cdto.setNUM_LOAD(65536);
		if(validate == null || validate.equals("")) {
			Cdto.setCONTENT("%");
		}
		else{
			Cdto.setCONTENT("%"+validate+"%");
		}
		Cdto.setNOTICE_TYPE(1);
		if(CUdto == null){
			result = dao.getClubBoardRestricted(Cdto);
		}
		else{
			result = dao.getClubBoard(Cdto);
		}
		model.addAttribute("ClubNotice", result);
		num_initial += result.size();
		
		String num_load = request.getParameter("num_load");
		if(num_load == null || num_load.equals("")){
			num_load = "10";
		}
		Cdto.setNUM_LOAD(Integer.parseInt(num_load));
		Cdto.setNOTICE_TYPE(0);
		if(CUdto == null){
			result = dao.getClubBoardRestricted(Cdto);
		}
		else{
			result = dao.getClubBoard(Cdto);
		}
		num_initial += result.size();
		for(int i = 0; i < result.size(); i++){
			Cdto = result.get(i);
			Cdto.setCOUNT_LIKE(dao.getCountLike(Cdto).getRESULT());
			Cdto.setCOUNT_COMMENT(dao.getCountComment(Cdto).getRESULT());
			result.set(i, Cdto);
		}
		model.addAttribute("ClubBoard", result);
		model.addAttribute("numInitial", num_initial);
		return result;
	}
	
	public void getClubDetail(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
		ClubDto Cdto = new ClubDto();
		Cdto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		ClubDto result = dao.getClubInfo(Cdto);
		
		model.addAttribute("ClubInfo", result);
	}
	
	public void likeThis(HttpServletRequest request){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);

		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		ClubBoardDto CBdto = new ClubBoardDto();
		CBdto.setBOARD_ID(Integer.parseInt(request.getParameter("board_id")));
		CBdto.setWRITE_USER(Integer.parseInt(user_id));
		
		int ifLike = 0;
		ifLike = dao.ifLike(CBdto);
		
		if(ifLike == 0){
			dao.likeThis(CBdto);
		}
		else{
			dao.dislikeThis(CBdto);
		}
	}
	
	public void insertComment(HttpServletRequest request){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);

		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		CommentDto Cdto = new CommentDto();
		Cdto.setBOARD_ID(Integer.parseInt(request.getParameter("board_id")));
		Cdto.setCONTENT(request.getParameter("content"));
		Cdto.setWRITE_USER(Integer.parseInt(user_id));
		Cdto.setIS_REPLY(Integer.parseInt(request.getParameter("is_reply")));
		Cdto.setPARENT_ID(Integer.parseInt(request.getParameter("parent_id")));

		dao.insertCommentBoard(Cdto);
	}
	
	public JsonDto makeAlbum(HttpServletRequest request){
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
	    
	    ClubDao dao = sqlSession.getMapper(ClubDao.class);
	    ClubAlbumDto dto = new ClubAlbumDto();
	    
	    dto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
	    Timestamp timeStamp = new Timestamp(System.currentTimeMillis());
	    dto.setUSER_ID(Integer.parseInt(user_id));
	    dto.setCREATE_DATE(timeStamp.toString().substring(0, 19));
	    
	    dao.insertClubAlbum(dto);
	    ClubAlbumDto reDto = dao.getCreatedClubAlbum(dto);
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		vo.setVALUE(reDto.getALBUM_CODE());
		
		return vo;
	}
	
	public JsonDto uploadImages(HttpServletRequest request){
		MultipartHttpServletRequest multipartHttpServletRequest = (MultipartHttpServletRequest)request;
	    Iterator<String> iterator = multipartHttpServletRequest.getFileNames();
	    MultipartFile f = null;
	    
	    ClubDao dao = sqlSession.getMapper(ClubDao.class);
	    ClubAlbumDto dto = new ClubAlbumDto();
	    dto.setALBUM_CODE(Integer.parseInt(request.getParameter("album_code")));
	    
	    while(iterator.hasNext()){
	        f = multipartHttpServletRequest.getFile(iterator.next());
	        if(f.isEmpty() == false){
	        	try {
//	        		String type = f.getContentType().substring(f.getContentType().indexOf("/")+1);
	        		String type = "jpg";
	        		String origin = f.getOriginalFilename();
	        		String newname = origin.substring(0, origin.indexOf(".")) + "_" + System.currentTimeMillis() + "." + type;
	        		String path = request.getSession().getServletContext().getRealPath("resources/upload/club");
	                byte[] b = f.getBytes();
	                File file = new File(path+File.separator+newname);
	                FileOutputStream fos = new FileOutputStream(file);
	                fos.write(b);
	                fos.close();
	                
	                
	        	    //이미지 thumbnail이미지 생성
	        	    int width = 300;
	        	    int height = 300;
	        	    String format = "jpg";
	        	    BufferedImage inputImage = ImageIO.read(f.getInputStream());
	        	    BufferedImage outputImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	        	    Graphics2D g = outputImage.createGraphics();
	        	    g.drawImage(inputImage, 0, 0, width, height, null);
	        	    File resizeFile = new File(path + File.separator + "thumbnail" + File.separator + newname);
	        	    log.error(path + File.separator + "thumbnail" + File.separator + newname);
	        	    FileOutputStream resizeFos = new FileOutputStream(resizeFile);
	        	    ImageIO.write(outputImage, format, resizeFos);
	        	    
	        	    
	        	    dto.setFILE_NAME(newname);
	        	    dto.setFILE_MIME_TYPE(type);
	        	    dao.insertClubPicture(dto);
	        	    
	        	    
	            } catch (IOException e){
	                System.out.println(e.getMessage());
	            }
	        }
	    }
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		
		return vo;
	}
	
	public void getClubUserLevel(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);

		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		ClubUserDto Cdto = new ClubUserDto();
		Cdto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		Cdto.setUSER_ID(Integer.parseInt(user_id));
		ClubUserDto result = dao.getClubLevel(Cdto);

		if(result == null)
			model.addAttribute("user_level", -1);
		else
			model.addAttribute("user_level", result.getUSER_LEVEL());
		request.setAttribute("user_level", result);
		
	}
	
	public void getClubBoardView(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubBoardDto CBdto = new ClubBoardDto();
	    CBdto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
	    CBdto.setBOARD_ID(Integer.parseInt(request.getParameter("board_id")));
	    CBdto = dao.getClubBoardView(CBdto);
	    model.addAttribute("BoardView", CBdto);
		request.setAttribute("BoardView", CBdto);
	}
	
	public Object getBoardViewComment(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);

		String user_id = null;
		int user_id_int = -1;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		if(user_id != null){
			user_id_int = Integer.parseInt(user_id);
		}
		
		ClubBoardDto CBdto = new ClubBoardDto();
	    CBdto.setBOARD_ID(Integer.parseInt(request.getParameter("board_id")));
	    ArrayList<CommentDto> Cdtos = new ArrayList<CommentDto>();
	    ArrayList<CommentDto> Rdtos = new ArrayList<CommentDto>();
	    ArrayList<CommentDto> CommentResult =  new ArrayList<CommentDto>();
	    CommentDto Cdto = null;
	    CommentDto Rdto = null;
	    Cdtos = dao.getMainComment(CBdto);
	    for(int i = 0; i < Cdtos.size(); i++){
	    	Cdto = Cdtos.get(i);
	    	if(Cdto.getWRITE_USER() == user_id_int){
	    		Cdto.setIS_WRITER(1);
	    	}
	    	else{
	    		Cdto.setIS_WRITER(0);
	    	}
	    	Cdtos.set(i, Cdto);
	    	CommentResult.add(Cdto);
	    	Rdtos = dao.getReplyComment(Cdto);
	    	for(int j = 0; j < Rdtos.size(); j++){
	    		Rdto = Rdtos.get(j);
	    		if(Rdto.getWRITE_USER() == user_id_int){
	    			Rdto.setIS_WRITER(1);
	    		}
	    		else{
	    			Rdto.setIS_WRITER(0);
	    		}
		    	Rdtos.set(j, Rdto);
	    	}
	    	CommentResult.addAll(Rdtos);
	    }
	    model.addAttribute("BoardComment", CommentResult);
	    
	    return CommentResult;
	}
	
	public Object getBoardViewLike(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
	    ArrayList<LikeDto> Ldtos = new ArrayList<LikeDto>();
		ClubBoardDto CBdto = new ClubBoardDto();
		LikeDto Ldto = new LikeDto();
	    CBdto.setBOARD_ID(Integer.parseInt(request.getParameter("board_id")));
	    Ldtos = dao.getLike(CBdto);
	    model.addAttribute("LikeUsers",Ldtos);

		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		CBdto.setWRITE_USER(Integer.parseInt(user_id));
		int isLike = dao.ifLike(CBdto);
	    model.addAttribute("IsLike",isLike);
	    Ldto.setIsLike(isLike);

	    JsonDto Jdto = dao.getCountLike(CBdto);
	    model.addAttribute("CountLike",Jdto.getRESULT());
	    Ldto.setCountLike(Jdto.getRESULT());
	    
	    return Ldto;
	}
	
	public JsonDto updateAlbumTitle(HttpServletRequest request){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
	    ClubAlbumDto dto = new ClubAlbumDto();
	    
	    dto.setTITLE(request.getParameter("title"));
	    dto.setALBUM_CODE(Integer.parseInt(request.getParameter("album_code")));
	    dto.setIS_CLOSED(Integer.parseInt(request.getParameter("is_closed")));
	    dao.updateClubTitle(dto);
	    
	    ClubAlbumDto reDto = dao.getClubAlbum(dto);
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		vo.setVALUE(reDto);
		
		return vo;
	}
	
	public void getClubAlbumView(HttpServletRequest request, Model model){
		ClubDao CDao = sqlSession.getMapper(ClubDao.class);
		AccountDao aDao = sqlSession.getMapper(AccountDao.class);
		
		int album_code = Integer.parseInt(request.getParameter("album_code"));
		
		//작성글 정보
		ClubAlbumDto cDto = new ClubAlbumDto();
		cDto.setALBUM_CODE(album_code);
		ArrayList<ClubAlbumDto> Pictures = CDao.getClubAlbumView(cDto);
		ClubAlbumDto AlbumInfo = CDao.getClubAlbum(cDto);
		
		//작성자 정보
		AccountDto aDto = new AccountDto();
		aDto.setUSER_ID(AlbumInfo.getUSER_ID());
		AccountDto WriterInfo = aDao.getUserInfo(aDto);
		
		//댓글정보
		AlbumReplyDto rDto = new AlbumReplyDto();
		rDto.setALBUM_CODE(album_code);
		ArrayList<AlbumReplyDto> ReplyInfo = CDao.getAllAlbumReply(rDto);
		
		//좋아요정보
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		AlbumLikeDto lDto = new AlbumLikeDto();
		lDto.setALBUM_CODE(album_code);
		lDto.setUSER_ID(Integer.parseInt(user_id));
		AlbumLikeDto LikeInfo = CDao.getAlbumLike(lDto);
		
		//찜정보
		AlbumZzimDto zDto = new AlbumZzimDto();
		zDto.setALBUM_CODE(album_code);
		zDto.setUSER_ID(Integer.parseInt(user_id));
		AlbumZzimDto ZzimInfo = CDao.getAlbumZzim(zDto);
		
		model.addAttribute("Pictures", Pictures);
		model.addAttribute("AlbumInfo", AlbumInfo);
		model.addAttribute("WriterInfo", WriterInfo);
		model.addAttribute("ReplyInfo", ReplyInfo);
		model.addAttribute("LikeInfo", LikeInfo);
		model.addAttribute("ZzimInfo", ZzimInfo);
		model.addAttribute("UserId", user_id);
	}
	
	public JsonDto insertAlbumReply(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		AlbumReplyDto dto = new AlbumReplyDto();
		dto.setALBUM_CODE(Integer.parseInt(request.getParameter("album_code")));
		dto.setREPLY(request.getParameter("reply"));
		dto.setUSER_ID(Integer.parseInt(user_id));
		Timestamp timeStamp = new Timestamp(System.currentTimeMillis());
	    dto.setCREATED_DATE(timeStamp.toString().substring(0, 19));
		dao.insertAlbumReply(dto);
		
		AlbumReplyDto reDto = dao.getAlbumReply(dto);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		vo.setVALUE(reDto);
		return vo;
	}
	
	public JsonDto albumLike(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		AlbumLikeDto dto = new AlbumLikeDto();
		dto.setALBUM_CODE(Integer.parseInt(request.getParameter("album_code")));
		dto.setUSER_ID(Integer.parseInt(user_id));
		dao.likeAlbum(dto);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public JsonDto albumDislike(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		AlbumLikeDto dto = new AlbumLikeDto();
		dto.setALBUM_CODE(Integer.parseInt(request.getParameter("album_code")));
		dto.setUSER_ID(Integer.parseInt(user_id));
		dao.dislikeAlbum(dto);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public void AlbumDelete(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubAlbumDto dto = new ClubAlbumDto();
		dto.setALBUM_CODE(Integer.parseInt(request.getParameter("album_code")));
		dto.setIS_DELETED(1);
	    dao.albumDelete(dto);
	}
	
	public JsonDto AlbumUpdate(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubAlbumDto dto = new ClubAlbumDto();
		dto.setALBUM_CODE(Integer.parseInt(request.getParameter("album_code")));
		dto.setTITLE(request.getParameter("title"));
	    dao.albumUpdate(dto);
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public void getClubUser(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);

		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		ClubUserDto Cdto = new ClubUserDto();
		Cdto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		ArrayList<ClubUserDto> ClubUserInfo = dao.getClubUser(Cdto);
		
		//유저가 클럽 일원인지 확인
		boolean IsMemberFlag = false;
		for(ClubUserDto dto : ClubUserInfo){
			if(dto.getUSER_ID()==Integer.parseInt(user_id))
				IsMemberFlag = true;
		}
		model.addAttribute("IsMemberFlag", IsMemberFlag);
		model.addAttribute("ClubUserInfo", ClubUserInfo);
	}
	
	public Object insertBoard(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubBoardDto CBDto = new ClubBoardDto();
		JsonDto JDto = new JsonDto();
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}

		CBDto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		CBDto.setTITLE(request.getParameter("title"));
		CBDto.setCONTENT(request.getParameter("content"));
		CBDto.setIS_OPEN(Integer.parseInt(request.getParameter("is_open")));
		CBDto.setNOTICE_TYPE(Integer.parseInt(request.getParameter("notice_type")));
		CBDto.setWRITE_USER(Integer.parseInt(user_id));
		dao.insertClubBoard(CBDto);
		
		JDto.setRESULT(1);
		
		return JDto;
	}
	
	public JsonDto album_zzim(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		AlbumZzimDto dto = new AlbumZzimDto();
		dto.setALBUM_CODE(Integer.parseInt(request.getParameter("album_code")));
		dto.setUSER_ID(Integer.parseInt(user_id));
		dao.zzimAlbum(dto);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public JsonDto album_zzim_cancel(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		AlbumZzimDto dto = new AlbumZzimDto();
		dto.setALBUM_CODE(Integer.parseInt(request.getParameter("album_code")));
		dto.setUSER_ID(Integer.parseInt(user_id));
		dao.ZzimCancel(dto);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public Object updateBoard(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubBoardDto CBDto = new ClubBoardDto();
		JsonDto JDto = new JsonDto();
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}

		CBDto.setBOARD_ID(Integer.parseInt(request.getParameter("board_id")));
		CBDto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		CBDto.setTITLE(request.getParameter("title"));
		CBDto.setCONTENT(request.getParameter("content"));
		CBDto.setIS_OPEN(Integer.parseInt(request.getParameter("is_open")));
		CBDto.setNOTICE_TYPE(Integer.parseInt(request.getParameter("notice_type")));
		CBDto.setMODIFY_USER(Integer.parseInt(user_id));
		dao.updateClubBoard(CBDto);
		
		JDto.setRESULT(1);
		
		return JDto;
	}
	
	public Object deleteBoard(HttpServletRequest request){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubBoardDto CBDto = new ClubBoardDto();
		JsonDto JDto = new JsonDto();

		CBDto.setBOARD_ID(Integer.parseInt(request.getParameter("board_id")));
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		CBDto.setDELETE_USER(Integer.parseInt(user_id));
		dao.deleteClubBoard(CBDto);
		
		JDto.setRESULT(1);
		
		return JDto;
	}
	
	public void isWriter(HttpServletRequest request, Model model){
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		
		ClubBoardDto CBDto = (ClubBoardDto) request.getAttribute("BoardView");
		int write_user = CBDto.getWRITE_USER();
		
		if(Integer.parseInt(user_id) == write_user)
			model.addAttribute("is_writer", 1);
		else
			model.addAttribute("is_writer", 0);
		
	}
	
	public void arrangeWrite(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		
		ClubBoardDto Cdto = new ClubBoardDto();
		String is_modify = request.getParameter("is_modify");
		String club_code = request.getParameter("club_code");
		String board_id = request.getParameter("board_id");
		if(is_modify == null || is_modify.equals("")){
			is_modify = "0";
		}
		model.addAttribute("is_modify", is_modify);
		
		if(is_modify.equals("1")){
			Cdto.setCLUB_CODE(Integer.parseInt(club_code));
			Cdto.setBOARD_ID(Integer.parseInt(board_id));
			Cdto = dao.getClubBoardView(Cdto);
		}
		else{
			Cdto.setCONTENT("");
			Cdto.setIS_OPEN(1);
			Cdto.setNOTICE_TYPE(0);
			Cdto.setTITLE("");
		}
		model.addAttribute("original", Cdto);
	}
	
	public Object getBoardViewZzim(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		BoardZzimDto Zdto = new BoardZzimDto();
		Zdto.setBOARD_ID(Integer.parseInt(request.getParameter("board_id")));

		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		Zdto.setWRITE_USER(Integer.parseInt(user_id));
		int isZzim = dao.ifBoardZzim(Zdto);
		log.error(isZzim+"\n");
		Zdto.setIS_ZZIM(isZzim);
		
	    model.addAttribute("IsZzim",isZzim);

	    return Zdto;
	}
	
	public void zzimThis(HttpServletRequest request){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		BoardZzimDto Zdto = new BoardZzimDto();
		Zdto.setBOARD_ID(Integer.parseInt(request.getParameter("board_id")));

		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		Zdto.setWRITE_USER(Integer.parseInt(user_id));
		int isZzim = dao.ifBoardZzim(Zdto);
		if(isZzim == 0){
			dao.zzimThis(Zdto);
		}
		else{
			dao.diszzimThis(Zdto);
		}
	}
	
	public Object insertInquiry(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		JsonDto Jdto = new JsonDto();
		ClubInquiryDto CIDto = new ClubInquiryDto();
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}

		CIDto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		CIDto.setTITLE(request.getParameter("title"));
		CIDto.setCONTENT(request.getParameter("content"));
		String inquiry_type = request.getParameter("inquiry_type");
		if(inquiry_type != null && !inquiry_type.equals("")){
			CIDto.setINQUIRY_TYPE(Integer.parseInt(inquiry_type));
		}
		CIDto.setWRITE_USER(Integer.parseInt(user_id));
		String depth = request.getParameter("depth");
		if(depth != null && !depth.equals("")){
			CIDto.setDEPTH(Integer.parseInt(depth));
		}
		String parent_id = request.getParameter("parent_id");
		if(parent_id != null && !parent_id.equals("")){
			CIDto.setPARENT_ID(Integer.parseInt(parent_id));
		}
		dao.insertClubInquiry(CIDto);
		
		Jdto.setRESULT(1);
		
		return Jdto;
	}
	
	public Object updateInquiry(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		JsonDto Jdto = new JsonDto();
		ClubInquiryDto CIDto = new ClubInquiryDto();
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}

		CIDto.setINQUIRY_ID(Integer.parseInt(request.getParameter("inquiry_id")));
		CIDto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		CIDto.setTITLE(request.getParameter("title"));
		CIDto.setCONTENT(request.getParameter("content"));
		CIDto.setINQUIRY_TYPE(Integer.parseInt(request.getParameter("notice_type")));
		CIDto.setMODIFY_USER(Integer.parseInt(user_id));
		dao.updateClubInquiry(CIDto);
		
		Jdto.setRESULT(1);
		
		return Jdto;
	}
	
	public void returnPageControll(HttpServletRequest request, Model model){
		String mode = request.getParameter("mode");
		if(mode != null) {
			model.addAttribute("mode", mode);
		}
	}
	
	public Object getAlbumSearch(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubAlbumDto dto = new ClubAlbumDto();
		
		dto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		dto.setTITLE(request.getParameter("word"));
		ArrayList<ClubAlbumDto> reDto = dao.getAlbumSearch(dto);
		
		JsonDto Jdto = new JsonDto();
		Jdto.setRESULT(1);
		Jdto.setVALUE(reDto);
		
		return Jdto;
	}
	
	public void getClubInquiry(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ArrayList<ClubInquiryDto> result = null;
		
		ClubInquiryDto Cdto = new ClubInquiryDto();
		Cdto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		
		String last_iid = request.getParameter("last_iid");
		if(last_iid == null || last_iid.equals("")){
			last_iid = "-1";
		}
		Cdto.setINQUIRY_ID(Integer.parseInt(last_iid));
		
		String num_load = request.getParameter("num_load");
		if(num_load == null || num_load.equals("")){
			num_load = "10";
		}
		Cdto.setNUM_LOAD(Integer.parseInt(num_load));
		
		String inquiry_type = request.getParameter("inquiry_type");
		if(inquiry_type == null || inquiry_type.equals("")){
			inquiry_type = "-1";
		}
		Cdto.setINQUIRY_TYPE(Integer.parseInt(inquiry_type));
		
		Cdto.setDEPTH(0);
		
		result = dao.getClubInquiry(Cdto);
		
		for(int i = 0; i < result.size(); i++){
			Cdto = result.get(i);
			Cdto.setIS_RESPONSED(dao.ifResponsed(Cdto));
			result.set(i, Cdto);
		}
		
		model.addAttribute("ClubAdminInquiry", result);
	}
	
	public Object getAlbumMore(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubAlbumDto dto = new ClubAlbumDto();
		
		dto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		dto.setLIMIT_START(Integer.parseInt(request.getParameter("page"))*6);
		ArrayList<ClubAlbumDto> reDto = dao.getAlbumMore(dto);
		
		JsonDto Jdto = new JsonDto();
		if(reDto.isEmpty()){
			Jdto.setRESULT(0);
		} else {
			Jdto.setRESULT(1);
			Jdto.setVALUE(reDto);
		}
		
		return Jdto;
	} 
	
	public Object getAlbumSearchMore(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubAlbumDto dto = new ClubAlbumDto();
		
		dto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
		dto.setTITLE(request.getParameter("word"));
		dto.setLIMIT_START(Integer.parseInt(request.getParameter("search_page"))*6);
		ArrayList<ClubAlbumDto> reDto = dao.getAlbumSearchMore(dto);
		
		JsonDto Jdto = new JsonDto();
		if(reDto.isEmpty()){
			Jdto.setRESULT(0);
		} else {
			Jdto.setRESULT(1);
			Jdto.setVALUE(reDto);
		}
		
		return Jdto;
	} 
	
	public void getManager(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		int club_code = Integer.parseInt(request.getParameter("club_code"));
		
		//동호회 정보
		ClubDto Cdto = new ClubDto();
		Cdto.setCLUB_CODE(club_code);
		ClubDto club_info = dao.getClubInfo(Cdto);
		
		model.addAttribute("club_info", club_info);
	}
	
	public void getClubInquiryView(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubInquiryDto CIdto = new ClubInquiryDto();
		
		CIdto.setINQUIRY_ID(Integer.parseInt(request.getParameter("inquiry_id")));
		
		CIdto = dao.getClubInquiryView(CIdto);
		
		model.addAttribute("ClubInquiryView", CIdto);
	}
	
	public JsonDto getPaidList(HttpServletRequest request){
	    ClubDao dao = sqlSession.getMapper(ClubDao.class);
		int club_code = Integer.parseInt(request.getParameter("club_code"));
		String year = request.getParameter("year");
		String month = request.getParameter("month");
		
		//유저 회비 지불내역
		ClubUserPaidDto Pdto = new ClubUserPaidDto();
		Pdto.setCLUB_CODE(club_code);
		Pdto.setYEAR(year);
		Pdto.setMONTH(month);
		ArrayList<ClubUserPaidDto> user_info = dao.getClubUserPaid(Pdto);
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		vo.setVALUE(user_info);
		return vo;
	}
	
	public JsonDto userPaidCheck(HttpServletRequest request){
	    ClubDao dao = sqlSession.getMapper(ClubDao.class);
	    ClubUserPaidDto dto = new ClubUserPaidDto();
	    
	    dto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
	    dto.setUSER_ID(Integer.parseInt(request.getParameter("user_id")));
	    dto.setYEAR(request.getParameter("year"));
	    dto.setMONTH(request.getParameter("month"));
	    
	    dao.userPaidCheck(dto);
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public JsonDto userPaidUncheck(HttpServletRequest request){
	    ClubDao dao = sqlSession.getMapper(ClubDao.class);
	    ClubUserPaidDto dto = new ClubUserPaidDto();
	    
	    dto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
	    dto.setUSER_ID(Integer.parseInt(request.getParameter("user_id")));
	    dto.setYEAR(request.getParameter("year"));
	    dto.setMONTH(request.getParameter("month"));
	    
	    dao.userPaidUncheck(dto);
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public void getAllClubType(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ArrayList<ClubDto> Cdtos = dao.getAllClubType();
		model.addAttribute("club_type", Cdtos);
	}
	
	public void getAllClubTarget(HttpServletRequest request, Model model){
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ArrayList<ClubDto> Cdtos = dao.getAllClubTarget();
		model.addAttribute("club_target", Cdtos);
	}

	public void createClub(HttpServletRequest request, Model model) {
		locationService.getSi(request, model);
		locationService.getAllGu(request, model);
		sportsTypeService.getGroupedSports(request, model);
		getAllClubType(request, model);
		getAllClubTarget(request, model);
	}
	
	public JsonDto submitClubCreate(HttpServletRequest request) {
		// 클럽정보 INSERT
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubDto Cdto = new ClubDto();
		Cdto.setCLUB_NAME(request.getParameter("club_name"));
		Cdto.setMEMBER_NUM(Integer.parseInt(request.getParameter("member_num")));
		Cdto.setINTRODUCTION(request.getParameter("introduction"));
		Cdto.setLOCATION_CODE(Integer.parseInt(request.getParameter("location_code")));
		Cdto.setSPORTS_TYPE_CODE(Integer.parseInt(request.getParameter("sports_type_code")));
		Cdto.setESTABLISHMENT_YEAR(request.getParameter("establishment_year"));
		Cdto.setCLUB_TYPE_CODE(Integer.parseInt(request.getParameter("club_type_code")));
		Cdto.setCLUB_TARGET_CODE(Integer.parseInt(request.getParameter("club_target_code")));
		dao.makeClub(Cdto);
		
		log.error(Cdto.getCLUB_CODE());
		
		// 클럽회원에 작성자 추가
		JsonDto Jdto = insertClubUser(request, Cdto, "new");
		
		return Jdto;
	}
	
	public JsonDto insertClubUser(HttpServletRequest request, ClubDto Cdto, String form) {
		JsonDto Jdto = new JsonDto();
		ClubDao dao = sqlSession.getMapper(ClubDao.class);
		ClubUserDto CUdto = new ClubUserDto();
		
		int club_code = Cdto.getCLUB_CODE();
		CUdto.setCLUB_CODE(club_code);
		
		if(form == "new"){
			CUdto.setUSER_LEVEL(2);
		}
		else{
			CUdto.setUSER_LEVEL(1);
		}
		
		String user_id = null;
		Cookie[] cookie = request.getCookies();
		for(int i=0;i<cookie.length;i++){
			if(cookie[i].getName().equalsIgnoreCase("user_id"))
				user_id=cookie[i].getValue();
		}
		CUdto.setUSER_ID(Integer.parseInt(user_id));
		
		dao.insertClubUser(CUdto);
		
		//유저 회비 입력
		ClubUserFeeDto UFdto = new ClubUserFeeDto();
		Timestamp timeStamp = new Timestamp(System.currentTimeMillis());
	    String year = timeStamp.toString().substring(0, 4);
	    String month = timeStamp.toString().substring(5, 7);
	    UFdto.setCLUB_CODE(club_code);
	    UFdto.setUSER_ID(Integer.parseInt(user_id));
	    
	    if(form == "new"){
	    	UFdto.setFEE(0);
		}
		else{
			UFdto.setFEE(Cdto.getMEMBERSHIP_FEE());
		}
	    
		dao.setUserFee(UFdto);
		
		Jdto.setRESULT(Cdto.getCLUB_CODE());
		
		return Jdto;
	}
	
	public JsonDto getFeeList(HttpServletRequest request) throws ParseException{
	    ClubDao dao = sqlSession.getMapper(ClubDao.class);
		int club_code = Integer.parseInt(request.getParameter("club_code"));
		String year = request.getParameter("year");
		String month = request.getParameter("month");
		month = String.format("%02d", Integer.parseInt(month)); 
		
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
		SimpleDateFormat sql_format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date parse_date = format.parse(year+month+"01000000");
		String date = sql_format.format(parse_date);
		
		//유저 회비 지불내역
		ClubUserFeeDto Fdto = new ClubUserFeeDto();
		Fdto.setCLUB_CODE(club_code);
		Fdto.setCREATED_DATE(date);
		ArrayList<ClubUserFeeDto> user_info = dao.getClubUserFee(Fdto);
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		vo.setVALUE(user_info);
		return vo;
	}
	
	public JsonDto FeeUpdate(HttpServletRequest request) throws ParseException, org.json.simple.parser.ParseException{
	    ClubDao dao = sqlSession.getMapper(ClubDao.class);
	    
	    
	    ClubUserFeeDto Fdto = new ClubUserFeeDto();
	    
	    Fdto.setCLUB_CODE(Integer.parseInt(request.getParameter("club_code")));
	    
	    String year = request.getParameter("year");
		String month = request.getParameter("month");
		month = String.format("%02d", Integer.parseInt(month)); 
		SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmss");
		SimpleDateFormat sql_format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date parse_date = format.parse(year+month+"01000000");
		String date = sql_format.format(parse_date);
	    Fdto.setCREATED_DATE(date);
	    
	    //기존에 그 달에 존재하는 데이터 다 지우기
	    dao.deleteFeeList(Fdto);
	    
	    //insert
	    String json_info = request.getParameter("json_info");
	    JSONParser jsonParser = new JSONParser();
	    JSONArray jsonArr = (JSONArray)jsonParser.parse(json_info);
	    for(int i=0;i<jsonArr.size();i++){
	    	JSONObject obj = (JSONObject)jsonArr.get(i);
	    	Fdto.setUSER_ID(Integer.parseInt(obj.get("user_id").toString()));
	    	Fdto.setFEE(Integer.parseInt(obj.get("fee").toString()));
	    	dao.insertFeeList(Fdto);
	    }
	    
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	
	public JsonDto editClubInfo(HttpServletRequest request){
	    ClubDao dao = sqlSession.getMapper(ClubDao.class);
	    ClubDto Cdto = new ClubDto();
	    String column = request.getParameter("dbMapColumn");
	    String type = request.getParameter("dbMapType");
	    String value = request.getParameter("value");
	    String club_code = request.getParameter("club_code");
    	Cdto.setCLUB_CODE(Integer.parseInt(club_code));
	    
	    if(column.equals("CLUB_NAME")){
	    	Cdto.setCLUB_NAME(value);
	    	dao.updateClubInfoClubName(Cdto);
	    }
	    else if(column.equals("SKILL_POINT")){
	    	Cdto.setSKILL_POINT(Integer.parseInt(value));
	    	dao.updateClubInfoSkillPoint(Cdto);
	    }
	    else if(column.equals("MATCH_DATE")){
	    	Cdto.setMATCH_DATE(value);
	    	dao.updateClubInfoMatchDate(Cdto);
	    }
	    else if(column.equals("EXERCISE_PLACE")){
	    	Cdto.setEXERCISE_PLACE(value);
	    	dao.updateClubInfoExercisePlace(Cdto);
	    }
	    else if(column.equals("EXERCISE_TIME")){
	    	Cdto.setEXERCISE_TIME(value);
	    	dao.updateClubInfoExerciseTime(Cdto);
	    }
	    else if(column.equals("CLUB_TARGET_CODE")){
	    	Cdto.setCLUB_TARGET_CODE(Integer.parseInt(value));
	    	dao.updateClubInfoClubTargetCode(Cdto);
	    }
	    else if(column.equals("INTRODUCTION")){
	    	Cdto.setINTRODUCTION(value);
	    	dao.updateClubInfoIntroduction(Cdto);
	    }
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);

		return vo;
	}
	
	public JsonDto changeClubImage(HttpServletRequest request){
	    ClubDao dao = sqlSession.getMapper(ClubDao.class);
	    ClubDto Cdto = new ClubDto();
	    String club_code = request.getParameter("club_code");
	    String file_name = request.getParameter("file_name");
	    String ts = Long.toString(System.currentTimeMillis());
	    Cdto.setCLUB_CODE(Integer.parseInt(club_code));
	    Base64.Decoder decoder = Base64.getDecoder();
	    
	    String imageData = request.getParameter("imageData");
	    String typename = imageData.split("/")[1].split(";")[0];
	    String resultImageDirectorySuffix = "resources/upload/club/"+file_name+"_"+ts+"."+typename;
	    String resultImageDirectory = servletContext.getRealPath("/")+resultImageDirectorySuffix;
	    try {
			new FileOutputStream(resultImageDirectory).write(decoder.decode(imageData.split(",")[1]));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    resultImageDirectorySuffix = "/SportForAll/"+resultImageDirectorySuffix;
	    log.error(resultImageDirectorySuffix);
	    Cdto.setMAIN_PIC(resultImageDirectorySuffix);
	    
	    dao.updateClubInfoMainPic(Cdto);
	    
	    JsonDto vo = new JsonDto();
		vo.setRESULT(1);

		return vo;
	}
}
