package com.sportsfactory.sportforall.service;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;

import javax.imageio.ImageIO;
import javax.servlet.ServletContext;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.sportsfactory.sportforall.dao.AccountDao;
import com.sportsfactory.sportforall.dao.ClubDao;
import com.sportsfactory.sportforall.dao.LocationDao;
import com.sportsfactory.sportforall.dao.SportsTypeDao;
import com.sportsfactory.sportforall.dao.VersionDao;
import com.sportsfactory.sportforall.dto.AccountDto;
import com.sportsfactory.sportforall.dto.ClubAlbumDto;
import com.sportsfactory.sportforall.dto.ClubDto;
import com.sportsfactory.sportforall.dto.ClubInviteDto;
import com.sportsfactory.sportforall.dto.ClubUserDto;
import com.sportsfactory.sportforall.dto.JsonDto;
import com.sportsfactory.sportforall.dto.LocationDto;
import com.sportsfactory.sportforall.dto.UserInterestDto;
import com.sportsfactory.sportforall.dto.UserInterestListDto;
import com.sportsfactory.sportforall.dto.UserJoinedClubDto;
import com.sportsfactory.sportforall.dto.UserPhotoDto;
import com.sportsfactory.sportforall.dto.VersionDto;
import com.sportsfactory.sportforall.dto.ZzimDto;
import com.sportsfactory.sportforall.util.CommonUtil;

public class MyprofileService {
	
	private static Logger log = Logger.getLogger(MyprofileService.class);
	
	@Autowired
	private SqlSession sqlSession;
	@Autowired
	LocationService locationService;
	@Autowired
	SportsTypeService sportsTypeService;
	@Autowired
	private ServletContext servletContext;
	
	/*
	 * index페이지 정보 가져오기
	 */
	public void getIndexInfo(Model model, int user_id){
		getUserInfo(model, user_id);
		getUserInterest(model, user_id);
		getUserClub(model, user_id);
		getUserPhoto(model, user_id);
	}
	
	/*
	 * 유저정보
	 */
	public void getUserInfo(Model model, int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		AccountDto dto = new AccountDto();
		dto.setUSER_ID(user_id);
		AccountDto user_info = dao.getUserInfo(dto);
		model.addAttribute("user_info", user_info);
	}
	
	/*
	 * 유저 관심종목 정보
	 */
	public void getUserInterest(Model model, int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		UserInterestDto dto = new UserInterestDto();
		dto.setUSER_ID(user_id);
		ArrayList<UserInterestDto> user_interest = dao.getUserInterest(dto);
		model.addAttribute("user_interest", user_interest);
	}
	
	/*
	 * 유저 가입한 동호회 정보
	 */
	public void getUserClub(Model model, int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		UserJoinedClubDto dto = new UserJoinedClubDto();
		dto.setUSER_ID(user_id);
		ArrayList<UserJoinedClubDto> user_club = dao.getUserClub(dto);
		model.addAttribute("user_club", user_club);
	}
	
	/*
	 * 유저 등록 사진 정보
	 */
	public void getUserPhoto(Model model, int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		UserPhotoDto dto = new UserPhotoDto();
		dto.setUSER_ID(user_id);
		ArrayList<UserPhotoDto> user_photo = dao.getUserPhoto(dto);
		model.addAttribute("user_photo", user_photo);
	}
	
	/*
	 * profileSetting 페이지 정보
	 */
	public void getProfileSetting(Model model, int user_id){
		getUserInfo(model, user_id);
	}
	
	/*
	 * 로그아웃
	 */
	public Object logout(HttpServletResponse response){
		Cookie c = new Cookie("user_id", null);
		c.setComment("user_id");
		c.setPath("/");
		c.setMaxAge(0);
		response.addCookie(c);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	/*
	 * 푸쉬알람 ON
	 */
	public Object pushCheck(int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		AccountDto dto = new AccountDto();
		dto.setUSER_ID(user_id);
		dto.setPUSH_ALRAM(1);
		dao.updatePushAlram(dto);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	/*
	 * 푸쉬알람 OFF
	 */
	public Object pushCheckCancel(int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		AccountDto dto = new AccountDto();
		dto.setUSER_ID(user_id);
		dto.setPUSH_ALRAM(0);
		dao.updatePushAlram(dto);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	/*
	 * 계정 설정 PAGE
	 */
	public void getProfile(Model model, int user_id){
		getUserInfo(model, user_id);
	}
	
	/*
	 * 비밀번호 변경
	 */
	public Object passwordUpdate(AccountDto dto, int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		dto.setUSER_ID(user_id);
		dao.updatePassword(dto);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public Object dropOut(HttpServletResponse response, int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		AccountDto dto = new AccountDto();
		dto.setUSER_ID(user_id);
		
		//회원이 동호회의 마지막남은 운영진인지 확인 후 false값
		UserJoinedClubDto UJCdto = new UserJoinedClubDto();
		UJCdto.setUSER_ID(user_id);
		ArrayList<UserJoinedClubDto> redto = dao.getUserClub(UJCdto);
		if(redto!=null){
			for(int i=0;i<redto.size();i++){
				ClubDao CDao = sqlSession.getMapper(ClubDao.class);
				ClubUserDto CUdto = new ClubUserDto();
				CUdto.setCLUB_CODE(redto.get(i).getCLUB_CODE());
				ArrayList<ClubUserDto> CUredto = CDao.getClubUser(CUdto);
				
				if(CUredto.size()==1 && CUredto.get(0).getUSER_ID() == user_id){
//					ClubDto Cdto = new ClubDto();
//					Cdto.setDELETE_USER(user_id);
//					Cdto.setCLUB_CODE(CUredto.get(0).getCLUB_CODE());
//					CDao.confirmDeleteClub(Cdto);
					JsonDto vo = new JsonDto();
					vo.setRESULT(0);
					return vo;
				}
				
			}
		}
		
		
		
		
		dao.dropOut(dto);
		
		logout(response);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public void getProfileModify(Model model, int user_id){
		locationService.getSi(model);
		sportsTypeService.getAllSports(model);
		getUserInfo(model, user_id);
		getUserInterest(model, user_id);
	}
	
	public Object getGU(LocationDto dto){
		LocationDao dao = sqlSession.getMapper(LocationDao.class);
		ArrayList<LocationDto> gu_info = dao.getGu(dto);
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		vo.setVALUE(gu_info);
		return vo;
	}
	
	public Object updateProfile(AccountDto dto, UserInterestListDto UILdto, int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		dto.setUSER_ID(user_id);
		
//		log.error(dto.getPROFILE_BACKGROUND());
//		log.error(dto.getPROFILE());
		
		if(!dto.getPROFILE_BACKGROUND().equalsIgnoreCase("")){
			updateProfileBackroundImage(dao, dto);
		}
		if(!dto.getPROFILE().equalsIgnoreCase("")){
			updateProfileImage(dao, dto);
		}
	    dao.updateProfile(dto);
		
		//관심사 모두 지우기
		dao.deleteUserInterest(dto);
		UserInterestDto UIdto = new UserInterestDto();
		UIdto.setUSER_ID(user_id);
		//관심사 입력
		for(int i=0;i<UILdto.getCode_arr().size();i++){
			UIdto.setCATEGORY_CODE(UILdto.getCode_arr().get(i));
			UIdto.setCAREER(UILdto.getCareer_arr().get(i));
			UIdto.setLEVEL(UILdto.getLevel_arr().get(i));
			dao.insertUserInterest(UIdto);
		}
		
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public void updateProfileBackroundImage(AccountDao dao, AccountDto dto){
		//background IMAGE
		Base64.Decoder decoder = Base64.getDecoder();
	    try {
	    	String imageData = dto.getPROFILE_BACKGROUND();
		    String typename = imageData.split("/")[1].split(";")[0];
		    String newname = "background_" + System.currentTimeMillis()+"."+typename;
		    String resultImageDirectorySuffix = "resources/upload/user/background/"+newname;
		    String resultImageDirectory = servletContext.getRealPath("/")+resultImageDirectorySuffix;
			new FileOutputStream(resultImageDirectory).write(decoder.decode(imageData.split(",")[1]));
			dto.setPROFILE_BACKGROUND(newname);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    dao.updateUserProfileBackground(dto);
	}
	
	public void updateProfileImage(AccountDao dao, AccountDto dto){
		//profile IMAGE
	    Base64.Decoder decoder = Base64.getDecoder();
	    try {
	    	String imageData = dto.getPROFILE();
		    String typename = imageData.split("/")[1].split(";")[0];
		    String newname = "profile_" + System.currentTimeMillis()+"."+typename;
		    String resultImageDirectorySuffix = "resources/upload/user/profile/"+newname;
		    String resultImageDirectory = servletContext.getRealPath("/")+resultImageDirectorySuffix;
			new FileOutputStream(resultImageDirectory).write(decoder.decode(imageData.split(",")[1]));
			dto.setPROFILE(newname);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    dao.updateUserProfile(dto);
	}
	
	public Object userPhotoUpload(UserPhotoDto dto, int user_id){
	    AccountDao dao = sqlSession.getMapper(AccountDao.class);
	    dto.setUSER_ID(user_id);
	    
	    //해당 사진 자료가 있으면 지우고 다시 쓰기
	    dao.deleteUserPhotoBySeq(dto);
	    
	    Base64.Decoder decoder = Base64.getDecoder();
	    try {
	    	String imageData = dto.getBASE64();
		    String typename = imageData.split("/")[1].split(";")[0];
		    String newname = "photos_" + System.currentTimeMillis()+"."+typename;
		    String resultImageDirectorySuffix = "resources/upload/user/photos/"+newname;
		    String resultImageDirectory = servletContext.getRealPath("/")+resultImageDirectorySuffix;
			new FileOutputStream(resultImageDirectory).write(decoder.decode(imageData.split(",")[1]));
			dto.setPHOTO_NAME(newname);
			dao.insertUserPhoto(dto);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		return vo;
	}
	
	public void getZzimLocker(Model model, int user_id){
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		AccountDto dto = new AccountDto();
		dto.setUSER_ID(user_id);
		
		ArrayList<ZzimDto> zzim = new ArrayList<ZzimDto>();
		ArrayList<ZzimDto> album_zzim = dao.getUserAlbumZzim(dto);
		ArrayList<ZzimDto> board_zzim = dao.getUserBoardZzim(dto);
		ArrayList<ZzimDto> club_zzim = dao.getUserClubZzim(dto);
		ArrayList<ZzimDto> event_zzim = dao.getUserInfoEventZzim(dto);
		ArrayList<ZzimDto> facility_zzim = dao.getUserInfoFacilityZzim(dto);
		ArrayList<ZzimDto> news_zzim = dao.getUserInfoNewsZzim(dto);
		zzim.addAll(album_zzim);
		zzim.addAll(board_zzim);
		zzim.addAll(club_zzim);
		zzim.addAll(event_zzim);
		zzim.addAll(facility_zzim);
		zzim.addAll(news_zzim);
		
		Collections.sort(zzim, new Comparator<ZzimDto>() {
			public int compare(ZzimDto obj1, ZzimDto obj2){
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				int compare=-1;
				
				try {
					Date date1 = formatter.parse(obj1.getDATETIME());
					Date date2 = formatter.parse(obj2.getDATETIME());
					compare = date1.compareTo(date2);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				return (compare < 0) ? -1: (compare > 0) ? 1:0 ;
			}
		});
		
//		for(int i=0;i<zzim.size();i++){
//			ZzimDto obj = zzim.get(i);
//			log.error(obj.getCATEGORY() + ", " + obj.getTITLE()+ ", " + obj.getDATETIME());
//		}
		
		model.addAttribute("zzim", zzim);
	}
	
	public Object getVersion(){
	    VersionDao dao = sqlSession.getMapper(VersionDao.class);
	    VersionDto dto = dao.versionCheck();
	    
		JsonDto vo = new JsonDto();
		vo.setRESULT(1);
		vo.setVALUE(dto.getVERSION());
		return vo;
	}

	public Object getUserPhotoBySeq(UserPhotoDto dto) {
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		return dao.getUserPhotoBySeq(dto);
	}

	public Object deleteUserPhotoBySeq(UserPhotoDto dto) {
		AccountDao dao = sqlSession.getMapper(AccountDao.class);
		dao.deleteUserPhotoBySeq(dto);
		JsonDto Jdto = new JsonDto();
		Jdto.setRESULT(1);
		return Jdto;
	}
	
	
}